/* --- constants --- */
$w: 300px;          
$h: 100px;
$strokeWidth: 2px;
$svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 #{$w} #{$h}"><polyline fill="none" stroke-width="#{$strokeWidth}" stroke="red" points="0,45.486 38.514,45.486 44.595,33.324 50.676,45.486 57.771,45.486 62.838,55.622 71.959,9 80.067,63.729 84.122,45.486 97.297,45.486 103.379,40.419 110.473,45.486 150,45.486 188.514,45.486 194.595,33.324 200.676,45.486 207.771,45.486 212.838,55.622 221.959,9 230.067,63.729 234.122,45.486 247.297,45.486 253.379,40.419 260.473,45.486 300,45.486 338.514,45.486 344.595,33.324 350.676,45.486 357.771,45.486 362.838,55.622 371.959,9 380.067,63.729 384.122,45.486 397.297,45.486 403.379,40.419 410.473,45.486 1000,45.486"/></svg>';

// Container for the line
.heartbeat-container {
  position: relative; 
  bottom: 0;
  left: 0;
  width: $w;
  height: $h;
  background: transpatent;
  overflow: hidden;
  z-index: 500;
  margin: 0 auto;
}

// This tells what to show and what to clip out,
// Thus creating the "line pulsing" effect
// but it can only do it based on pixels not scaled
@keyframes pulse {
  0%   { clip-path: inset(0   100%   0   0); }
  10%  { clip-path: inset(0 calc(100% - #{$w / 3}) 0 0); }
  38%  { clip-path: inset(0 calc(100% - #{$w / 1.5}) 0 0); }
  48%  { clip-path: inset(0 0 0 0); }
  52%  { clip-path: inset(0 0 0 0); }
  62%  { clip-path: inset(0 0 0 #{$w / 3}); }
  90%  { clip-path: inset(0 0 0 #{$w / 1.5}); }
  100% { clip-path: inset(0 0 0 100%); }
}

// This is the css to show the actual line and do the animation above
.pulse{ 
  &:after{
    content:'';
    display:block;
    background: url('data:image/svg+xml;utf8,#{$svg}') 0 0 no-repeat; // repeat-x; 
    width:100%; 
    height:100%;
    position:absolute;
    animation:3s pulse infinite linear;
    z-index: 100;
  } 
}




